@page "/vacancies"
@rendermode InteractiveAuto

<PageTitle>Вакансии</PageTitle>

<div class="container my-4">
    <!-- Сообщение -->
    <div class="mb-3">
        <p>@Message</p>
    </div>

    <!-- Поля ввода -->
    <form>
        <div class="row g-3">
            <!-- Поле ввода PageCount -->
            <div class="col-md-6">
                <label for="pageCount" class="form-label">Количество страниц</label>
                <input class="form-control" id="pageCount" type="number" @bind-value="PageCount" />
            </div>

            <!-- Поле ввода VacanciesPerPage -->
            <div class="col-md-6">
                <label for="vacanciesPerPage" class="form-label">Вакансий на странице</label>
                <input class="form-control" id="vacanciesPerPage" type="number" @bind-value="VacanciesPerPage" />
            </div>
        </div>

        <!-- Кнопка отправки -->
        <div class="mt-3">
            <button type="button" class="btn btn-outline-primary w-100" @onclick="DoJob">Отправить запрос</button>
        </div>
    </form>

    <!-- Встраиваемый контент -->
    <div class="mt-4">
        <iframe src="https://datalens.yandex/vb7my06icq20i"
                width="100%" height="600px"
                frameborder="0" allowfullscreen></iframe>
    </div>

    <!-- Встраиваемый контент -->
    <div class="mt-4">
        <iframe src="https://datalens.yandex/etz1ub5rmf9q1"
                width="100%" height="600px"
                frameborder="0" allowfullscreen></iframe>
    </div>

    <!-- Встраиваемый контент -->
    <div class="mt-4">
        <iframe src="https://datalens.yandex/o4zautarb8rab"
                width="100%" height="600px"
                frameborder="0" allowfullscreen></iframe>
    </div>

    <!-- Встраиваемый контент -->
    <div class="mt-4">
        <iframe src="https://datalens.yandex/euq68s4h4qa21"
                width="100%" height="600px"
                frameborder="0" allowfullscreen></iframe>
    </div>
</div>


@code
{
    ICommonService CommonService { get; set; }

    public string Message { get; set; }

    public int PageCount { get; set; } = 2;

    public int VacanciesPerPage { get; set; } = 100;

    protected override Task OnInitializedAsync()
    {
        Message = string.Empty;
        HttpClient httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri(@"https://localhost:7188/");
        CommonService = new CommonService(httpClient);
        return base.OnInitializedAsync();
    }

    private void Test(int value)
    {
        Console.WriteLine(value);
    }

    private async void DoJob()
    {
        await CommonService.FetchVacancies(PageCount, VacanciesPerPage);
        string message = await CommonService.SendVacanciesJson();
        Message = message;
    }
}

